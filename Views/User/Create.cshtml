@model FinancialApp.Models.User
@{
    ViewData["Title"] = "Create User";
}

<div class="create-user-container">
    <div class="form-card">
        <div class="form-header">
            <h2>Create User</h2>
            <p class="subtitle">Add a new user to the system</p>
        </div>

        <form asp-action="Create" method="post" class="animated-form">
            <div class="form-group">
                <div class="input-container">
                    <label asp-for="Username" class="floating-label">Username</label>
                    <input asp-for="Username" class="animated-input" required />
                    <div class="input-underline"></div>
                </div>
            </div>

            <div class="form-group">
                <div class="input-container">
                    <label asp-for="Email" class="floating-label">Email Address</label>
                    <input asp-for="Email" class="animated-input" required />
                    <div class="input-underline"></div>
                </div>
            </div>

            <div class="form-group">
                <div class="input-container">
                    <label asp-for="PasswordHash" class="floating-label">Password</label>
                    <input asp-for="PasswordHash" type="password" class="animated-input" required />
                    <div class="input-underline"></div>
                </div>
            </div>

            <div class="form-group">
                <div class="select-container">
                    <label asp-for="Role" class="select-label">Role</label>
                    <select asp-for="Role" class="animated-select" required>
                        <option value="">Select a role</option>
                        <option value="User">User</option>
                        <option value="Admin">Admin</option>
                    </select>
                    <div class="select-arrow">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="6 9 12 15 18 9"></polyline>
                        </svg>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <button type="submit" class="submit-button">
                    <span>Create User</span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="5" y1="12" x2="19" y2="12"></line>
                        <polyline points="12 5 19 12 12 19"></polyline>
                    </svg>
                </button>
            </div>
        </form>
    </div>
</div>

<style>
    /* Modern Color Scheme */
    :root {
        --primary-color: #4a6cfa;
        --primary-hover: #3a5cea;
        --text-color: #333;
        --label-color: #666;
        --border-color: #e0e0e0;
        --background-color: #f8fafc;
        --card-background: #ffffff;
        --success-color: #38b2ac;
        --shadow-color: rgba(0, 0, 0, 0.05);
    }

    /* Base Styles */
    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        color: var(--text-color);
        background-color: var(--background-color);
        margin: 0;
        padding: 0;
        line-height: 1.6;
    }

    /* Card Container */
    .create-user-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
        margin-top: 5vh;
        padding: 2rem;
    }

    .form-card {
        width: 100%;
        max-width: 500px;
        background-color: var(--card-background);
        border-radius: 12px;
        box-shadow: 0 10px 25px var(--shadow-color);
        padding: 2.5rem;
        transition: all 0.3s ease;
    }

        .form-card:hover {
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            transform: translateY(-5px);
        }

    /* Form Header */
    .form-header {
        margin-bottom: 2.5rem;
        text-align: center;
    }

        .form-header h2 {
            color: var(--text-color);
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
            letter-spacing: -0.5px;
        }

    .subtitle {
        color: var(--label-color);
        font-size: 1rem;
        margin-top: 0.5rem;
    }

    /* Form Groups */
    .form-group {
        margin-bottom: 1.8rem;
        position: relative;
    }

    /* Input Container */
    .input-container {
        position: relative;
    }

    /* Animated Inputs */
    .animated-input {
        width: 100%;
        padding: 0.8rem 0;
        font-size: 1rem;
        background-color: transparent;
        border: none;
        border-bottom: 2px solid var(--border-color);
        color: var(--text-color);
        transition: all 0.3s ease;
        outline: none;
    }

        .animated-input:focus {
            border-color: var(--primary-color);
        }

    .input-underline {
        position: absolute;
        bottom: 0;
        left: 0;
        height: 2px;
        width: 0;
        background-color: var(--primary-color);
        transition: width 0.3s ease;
    }

    .animated-input:focus ~ .input-underline {
        width: 100%;
    }

    /* Floating Labels */
    .floating-label {
        position: absolute;
        left: 0;
        top: 0.8rem;
        color: var(--label-color);
        font-size: 1rem;
        transition: all 0.3s ease;
        pointer-events: none;
    }

    .animated-input:focus ~ .floating-label,
    .animated-input:not(:placeholder-shown) ~ .floating-label {
        top: -1rem;
        font-size: 0.8rem;
        color: var(--primary-color);
    }

    /* Select Element */
    .select-container {
        position: relative;
    }

    .animated-select {
        width: 100%;
        padding: 0.8rem 0;
        font-size: 1rem;
        background-color: transparent;
        border: none;
        border-bottom: 2px solid var(--border-color);
        color: var(--text-color);
        transition: all 0.3s ease;
        outline: none;
        appearance: none;
        cursor: pointer;
    }

        .animated-select:focus {
            border-color: var(--primary-color);
        }

    .select-label {
        position: absolute;
        left: 0;
        top: -1rem;
        font-size: 0.8rem;
        color: var(--label-color);
        transition: all 0.3s ease;
    }

    .animated-select:focus ~ .select-label {
        color: var(--primary-color);
    }

    .select-arrow {
        position: absolute;
        right: 0;
        top: 0.8rem;
        color: var(--label-color);
        pointer-events: none;
        transition: transform 0.3s ease;
    }

    .animated-select:focus ~ .select-arrow {
        transform: rotate(180deg);
        color: var(--primary-color);
    }

    /* Submit Button */
    .submit-button {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 1rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        outline: none;
        margin-top: 1rem;
        position: relative;
        overflow: hidden;
    }

        .submit-button span {
            position: relative;
            z-index: 1;
            transition: all 0.3s ease;
        }

        .submit-button svg {
            margin-left: 0.5rem;
            transition: all 0.3s ease;
            opacity: 0;
            width: 0;
        }

        .submit-button:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(74, 108, 250, 0.25);
        }

            .submit-button:hover svg {
                opacity: 1;
                width: 24px;
                transform: translateX(4px);
            }

        .submit-button:active {
            transform: translateY(0);
        }

    /* Animation for Form */
    .animated-form {
        animation: fadeInUp 0.5s ease-out forwards;
    }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .form-card

    {
        padding: 1.5rem;
    }

    .create-user-container {
        padding: 1rem;
    }

    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation for inputs when they receive focus
        const inputs = document.querySelectorAll('.animated-input');
        inputs.forEach(input => {
            // Initialize labels based on input value
            const label = input.parentElement.querySelector('.floating-label');
            if (input.value.trim() !== '') {
                label.classList.add('active');
            }

            // Add focus event listeners
            input.addEventListener('focus', function() {
                this.parentElement.classList.add('focused');
            });
            input.addEventListener('blur', function() {
                this.parentElement.classList.remove('focused');
                if (this.value.trim() !== '') {
                    this.parentElement.classList.add('filled');
                } else {
                    this.parentElement.classList.remove('filled');
                }
            });
        });

        // Add ripple effect to button
        const button = document.querySelector('.submit-button');
        button.addEventListener('click', function(e) {
            let x = e.clientX - e.target.getBoundingClientRect().left;
            let y = e.clientY - e.target.getBoundingClientRect().top;

            let ripple = document.createElement('span');
            ripple.classList.add('ripple');
            ripple.style.left = x + 'px';
            ripple.style.top = y + 'px';

            this.appendChild(ripple);

            setTimeout(function() {
                ripple.remove();
            }, 600);
        });
    });
</script>